<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloud.sms.docker.container.dao.DockerCloudContainerDao">
     <sql id="baseSql">
        select 
            container_id as containerId,
            container_name as containerName,
            create_time as createTime,
            create_user as createUser,
            image as image,
            status as status,
            network as network,
            server_ip as serverIp,
            memory as memory,
            cpu as cpu,
            gson_data as gsonData,
            app_name as appName,
            service_name as serviceName
         from docker_cloud_container  WHERE 1=1
         <if test="appName">
             and app_name = #{appName}
         </if>
         <if test="serviceName != null">
             and service_name=#{serviceName}
         </if>
     </sql>
    <select id="selectByAll" resultType="com.cloud.sms.docker.container.entity.DockerCloudContainerEntity">
         <include refid="baseSql" />

     </select>


      <select id="findById" resultType="com.cloud.sms.docker.container.entity.DockerCloudContainerEntity">
                   <include refid="baseSql" />
            where container_id=#{containerId}       </select>

    <insert id="save" parameterType="com.cloud.sms.docker.container.entity.DockerCloudContainerEntity">
        insert into docker_cloud_container(
            container_id,
            container_name,
            create_time,
            create_user,
            image,
            status,
            network,
            server_ip,
            memory,
            cpu,
            gson_data,
            app_name,
            service_name
        ) 
        values(        
            #{containerId},
            #{containerName},
            #{createTime},
            #{createUser},
            #{image},
            #{status},
            #{network},
            #{serverIp},
            #{memory},
            #{cpu},
            #{gsonData},
            #{appName},
            #{serviceName}
        )
    </insert>

    <update id="update" parameterType="com.cloud.sms.docker.container.entity.DockerCloudContainerEntity">
        update docker_cloud_container set   
            container_id=#{containerId},
            container_name=#{containerName},
            create_time=#{createTime},
            create_user=#{createUser},
            image=#{image},
            status=#{status},
            network=#{network},
            server_ip=#{serverIp},
            memory=#{memory},
            cpu=#{cpu},
            gson_data=#{gsonData},
            app_name=#{appName},
            service_name=#{serviceName}
         where container_id=#{containerId}
    </update>

    <delete id="delete" parameterType="com.cloud.sms.docker.container.entity.DockerCloudContainerEntity">
        delete from docker_cloud_container where container_id=#{containerId}
    </delete>

</mapper>

